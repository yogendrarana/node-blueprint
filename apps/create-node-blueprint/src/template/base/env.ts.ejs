import "dotenv/config";
import { z } from "zod";

// Define environment schema with required variables
const envSchema = z.object({
    PORT: z.string().min(1),
    NODE_ENV: z.string(),
    DB_HOST: z.string().min(1),
    DB_PORT: z.string().min(1),
    DB_NAME: z.string().min(1),
    DB_USER: z.string().min(1),
    DB_PASSWORD: z.string().min(1),
    DATABASE_URL: z.string().min(1),
    FRONTEND_URL: z.string().url().optional(),
    <%_ if (auth === "jwt-auth") { _%>
    ACCESS_TOKEN_SECRET: z.string().min(1),
    ACCESS_TOKEN_EXPIRES_IN: z.string().min(1),
    REFRESH_TOKEN_SECRET: z.string().min(1),
    REFRESH_TOKEN_EXPIRES_IN: z.string().min(1),
    <%_ } _%>
});

// Parse and validate environment variables
const parsedEnv = envSchema.safeParse(process.env);

// Handle validation failure - exit the process if environment is invalid
if (!parsedEnv.success) {
    console.error("Invalid environment variables:");
    console.error(parsedEnv.error.format());
}

// Export the validated environment with proper type inference
export const env = parsedEnv.data as z.infer<typeof envSchema>;