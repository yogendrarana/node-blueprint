# -----------------------------------------------------------------------------
# Stage 1: Dependencies (Install dependencies including dev dependencies)
# -----------------------------------------------------------------------------
FROM node:<%= nodeVersion || '18' %>-alpine AS deps
WORKDIR /app

# Set npm configuration for better caching and CI environment
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_UPDATE_NOTIFIER=false

COPY package.json <%= pkgLock %> ./

<%_ if (pkgManager === "npm") { _%>
RUN npm ci && \
    npm cache clean --force
<%_ } _%>
<%_ if (pkgManager === "yarn") { _%>
RUN yarn install --frozen-lockfile && \
    yarn cache clean
<%_ } _%>
<%_ if (pkgManager === "pnpm") { _%>
RUN pnpm install --frozen-lockfile && \
    pnpm store prune
<%_ } _%>

# -----------------------------------------------------------------------------
# Stage 2: Development (Run this stage for development)
# -----------------------------------------------------------------------------
FROM node:<%= nodeVersion || '18' %>-alpine AS dev
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

EXPOSE 8000

CMD ["npx", "tsx", "watch", "src/server.ts"]

# -----------------------------------------------------------------------------
# Stage 3: Build (Transpile, bundle, and build the app)
# -----------------------------------------------------------------------------
FROM node:<%= nodeVersion || '18' %>-alpine AS builder
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy application source
COPY . .

<%_ if (pkgManager === "npm") { _%>
RUN npm run build && \
    npm prune --production
<%_ } _%>
<%_ if (pkgManager === "yarn") { _%>
RUN yarn build
<%_ } _%>
<%_ if (pkgManager === "pnpm") { _%>
RUN pnpm build
<%_ } _%>

# -----------------------------------------------------------------------------
# Stage 4: Runtime (Production-ready container)
# -----------------------------------------------------------------------------
FROM node:<%= nodeVersion || '18' %>-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodeuser

# Set proper ownership of app directory
RUN chown -R nodeuser:nodejs /app

# Copy built application from builder stage
COPY --from=builder --chown=nodeuser:nodejs /app/dist /app/dist
COPY --from=builder --chown=nodeuser:nodejs /app/node_modules /app/node_modules
COPY --from=builder --chown=nodeuser:nodejs /app/package.json /app/package.json

EXPOSE 8000

# Switch to non-root user for security
USER nodeuser

# Add a health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8000/health/app || exit 1

# Set tini as entrypoint to properly handle signals by installing it first
# RUN apk add --no-cache tini
# ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/src/server.js"]